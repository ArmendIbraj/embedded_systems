
Node0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b07  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ea  00000000  00000000  00000e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000438  00000000  00000000  000016f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  0000208e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	81 c0       	rjmp	.+258    	; 0x19e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#define		FILED_LUMINESCENCE_SENSOR	1
#define		FILED_TEMPERATURE_SENSOR	3

int main(void)
{
	UART_Init(9600);
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	95 e2       	ldi	r25, 0x25	; 37
  a2:	0e d0       	rcall	.+28     	; 0xc0 <UART_Init>
	UART_PC_Init(9600);
  a4:	80 e8       	ldi	r24, 0x80	; 128
  a6:	95 e2       	ldi	r25, 0x25	; 37
	
	unsigned long int pollDelay = 0;
	
    while (1) 
    {
		if(UART_DataAvailable())
  a8:	1e d0       	rcall	.+60     	; 0xe6 <UART_PC_Init>
  aa:	16 d0       	rcall	.+44     	; 0xd8 <UART_DataAvailable>
			UART_PC_Write(UART_Read());
  ac:	88 23       	and	r24, r24
  ae:	11 f0       	breq	.+4      	; 0xb4 <main+0x16>
  b0:	16 d0       	rcall	.+44     	; 0xde <UART_Read>
			
		if(UART_PC_DataAvailable())
  b2:	50 d0       	rcall	.+160    	; 0x154 <UART_PC_Write>
  b4:	48 d0       	rcall	.+144    	; 0x146 <UART_PC_DataAvailable>
  b6:	88 23       	and	r24, r24
  b8:	c1 f3       	breq	.-16     	; 0xaa <main+0xc>
			UART_Write(UART_PC_Read());
  ba:	49 d0       	rcall	.+146    	; 0x14e <UART_PC_Read>
  bc:	12 d0       	rcall	.+36     	; 0xe2 <UART_Write>
  be:	f5 cf       	rjmp	.-22     	; 0xaa <main+0xc>

000000c0 <UART_Init>:
  c0:	2a b1       	in	r18, 0x0a	; 10
  c2:	28 6d       	ori	r18, 0xD8	; 216

unsigned char UART_ReadBlocking() {
	
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
  c4:	2a b9       	out	0x0a, r18	; 10
  c6:	e5 e9       	ldi	r30, 0x95	; 149
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	20 81       	ld	r18, Z
  cc:	26 60       	ori	r18, 0x06	; 6
  ce:	20 83       	st	Z, r18
  d0:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  d4:	89 b9       	out	0x09, r24	; 9
  d6:	08 95       	ret

000000d8 <UART_DataAvailable>:
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	80 78       	andi	r24, 0x80	; 128
  dc:	08 95       	ret

000000de <UART_Read>:
  de:	8c b1       	in	r24, 0x0c	; 12
  e0:	08 95       	ret

000000e2 <UART_Write>:

void UART_Write(unsigned char data) {
	
	while(!TXC0);
	UDR0 = data;
  e2:	8c b9       	out	0x0c, r24	; 12
  e4:	08 95       	ret

000000e6 <UART_PC_Init>:

unsigned char UART_PC_ReadBlocking() {
	
	while(!(UCSR1A & (1<<RXC1)));
	return UDR1;
}
  e6:	9c 01       	movw	r18, r24
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  f4:	c9 01       	movw	r24, r18
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	aa 1f       	adc	r26, r26
 100:	bb 1f       	adc	r27, r27
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	aa 1f       	adc	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	9c 01       	movw	r18, r24
 10c:	ad 01       	movw	r20, r26
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	44 1f       	adc	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	44 1f       	adc	r20, r20
 11c:	55 1f       	adc	r21, r21
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	81 ee       	ldi	r24, 0xE1	; 225
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	19 d0       	rcall	.+50     	; 0x15a <__udivmodsi4>
 128:	ba 01       	movw	r22, r20
 12a:	a9 01       	movw	r20, r18
 12c:	41 50       	subi	r20, 0x01	; 1
 12e:	51 09       	sbc	r21, r1
 130:	61 09       	sbc	r22, r1
 132:	71 09       	sbc	r23, r1
 134:	bb 27       	eor	r27, r27
 136:	a7 2f       	mov	r26, r23
 138:	96 2f       	mov	r25, r22
 13a:	85 2f       	mov	r24, r21
 13c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 140:	40 93 99 00 	sts	0x0099, r20	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 144:	08 95       	ret

00000146 <UART_PC_DataAvailable>:
 146:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 14a:	80 78       	andi	r24, 0x80	; 128
 14c:	08 95       	ret

0000014e <UART_PC_Read>:
 14e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 152:	08 95       	ret

00000154 <UART_PC_Write>:

void UART_PC_Write(unsigned char data) {
	
	while(!TXC1);
	UDR1 = data;
 154:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 158:	08 95       	ret

0000015a <__udivmodsi4>:
 15a:	a1 e2       	ldi	r26, 0x21	; 33
 15c:	1a 2e       	mov	r1, r26
 15e:	aa 1b       	sub	r26, r26
 160:	bb 1b       	sub	r27, r27
 162:	fd 01       	movw	r30, r26
 164:	0d c0       	rjmp	.+26     	; 0x180 <__udivmodsi4_ep>

00000166 <__udivmodsi4_loop>:
 166:	aa 1f       	adc	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	ee 1f       	adc	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	a2 17       	cp	r26, r18
 170:	b3 07       	cpc	r27, r19
 172:	e4 07       	cpc	r30, r20
 174:	f5 07       	cpc	r31, r21
 176:	20 f0       	brcs	.+8      	; 0x180 <__udivmodsi4_ep>
 178:	a2 1b       	sub	r26, r18
 17a:	b3 0b       	sbc	r27, r19
 17c:	e4 0b       	sbc	r30, r20
 17e:	f5 0b       	sbc	r31, r21

00000180 <__udivmodsi4_ep>:
 180:	66 1f       	adc	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	88 1f       	adc	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	1a 94       	dec	r1
 18a:	69 f7       	brne	.-38     	; 0x166 <__udivmodsi4_loop>
 18c:	60 95       	com	r22
 18e:	70 95       	com	r23
 190:	80 95       	com	r24
 192:	90 95       	com	r25
 194:	9b 01       	movw	r18, r22
 196:	ac 01       	movw	r20, r24
 198:	bd 01       	movw	r22, r26
 19a:	cf 01       	movw	r24, r30
 19c:	08 95       	ret

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
