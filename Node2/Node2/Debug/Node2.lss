
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000006c4  00000758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010a  0080010a  00000762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e65  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2f  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062d  00000000  00000000  0000215c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  0000278c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b9  00000000  00000000  00002964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000481  00000000  00000000  00002f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000339e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	34 d0       	rcall	.+104    	; 0x12c <main>
  c4:	fd c2       	rjmp	.+1530   	; 0x6c0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <COMM_IsHeader>:
#include "CommProtocol.h"

unsigned char COMM_IsHeader(unsigned char value) {
	
	return value & 0x80;
}
  c8:	80 78       	andi	r24, 0x80	; 128
  ca:	08 95       	ret

000000cc <COMM_IsWrite>:

unsigned char COMM_IsWrite(unsigned char value) {
	
	return value & 0x40;
}
  cc:	80 74       	andi	r24, 0x40	; 64
  ce:	08 95       	ret

000000d0 <COMM_GetField>:

unsigned char COMM_GetField(unsigned char value) {
	
	return (value >> 3) & 0x03;
  d0:	86 95       	lsr	r24
  d2:	86 95       	lsr	r24
  d4:	86 95       	lsr	r24
}
  d6:	83 70       	andi	r24, 0x03	; 3
  d8:	08 95       	ret

000000da <COMM_GetPayloadHigh>:

unsigned int COMM_GetPayloadHigh(unsigned char value) {
	
	return (unsigned int)(value & 0x07) << 7;
  da:	87 70       	andi	r24, 0x07	; 7
}
  dc:	20 e8       	ldi	r18, 0x80	; 128
  de:	82 9f       	mul	r24, r18
  e0:	c0 01       	movw	r24, r0
  e2:	11 24       	eor	r1, r1
  e4:	08 95       	ret

000000e6 <COMM_GetPayloadLow>:

unsigned int COMM_GetPayloadLow(unsigned char value) {
	
	return value & 0x7F;
  e6:	8f 77       	andi	r24, 0x7F	; 127
}
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret

000000ec <SetTemperatureValue>:
void SetTemperatureValue(unsigned int value)
{
	// Convert ADC value to temperature (check LM335 datasheet!)
	float temperatureValue = 500.0f * value / 1024.0f - 273.15f;
	
	SEGDISP_SetFloat(temperatureValue, 2);
  ec:	bc 01       	movw	r22, r24
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	b7 d1       	rcall	.+878    	; 0x462 <__floatunsisf>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	4a ef       	ldi	r20, 0xFA	; 250
  fa:	53 e4       	ldi	r21, 0x43	; 67
  fc:	40 d2       	rcall	.+1152   	; 0x57e <__mulsf3>
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	40 e8       	ldi	r20, 0x80	; 128
 104:	5a e3       	ldi	r21, 0x3A	; 58
 106:	3b d2       	rcall	.+1142   	; 0x57e <__mulsf3>
 108:	23 e3       	ldi	r18, 0x33	; 51
 10a:	33 e9       	ldi	r19, 0x93	; 147
 10c:	48 e8       	ldi	r20, 0x88	; 136
 10e:	53 e4       	ldi	r21, 0x43	; 67
 110:	12 d1       	rcall	.+548    	; 0x336 <__subsf3>
 112:	42 e0       	ldi	r20, 0x02	; 2
 114:	d2 c0       	rjmp	.+420    	; 0x2ba <SEGDISP_SetFloat>
 116:	08 95       	ret

00000118 <ProcessWriteRequest>:
	}
}

void ProcessWriteRequest()
{
	switch (currentField)
 118:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <currentField>
 11c:	83 30       	cpi	r24, 0x03	; 3
 11e:	29 f4       	brne	.+10     	; 0x12a <ProcessWriteRequest+0x12>
	{
		case FILED_TEMPERATURE_SENSOR:
			SetTemperatureValue(currentPayload);
 120:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 124:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 128:	e1 cf       	rjmp	.-62     	; 0xec <SetTemperatureValue>
 12a:	08 95       	ret

0000012c <main>:
unsigned char currentField;
unsigned int  currentPayload;

int main(void)
{
	SEGDISP_Init();
 12c:	3d d0       	rcall	.+122    	; 0x1a8 <SEGDISP_Init>
	UART_Init(9600);
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	95 e2       	ldi	r25, 0x25	; 37
 132:	f0 d0       	rcall	.+480    	; 0x314 <UART_Init>
	
	displayRefreshCounter = 0;
 134:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <displayRefreshCounter>
	
	while (1)
	{
		if(!displayRefreshCounter++)
 138:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <displayRefreshCounter>
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	98 0f       	add	r25, r24
 140:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <displayRefreshCounter>
 144:	81 11       	cpse	r24, r1
			SEGDISP_Refresh();
 146:	01 c0       	rjmp	.+2      	; 0x14a <main+0x1e>
 148:	ce d0       	rcall	.+412    	; 0x2e6 <SEGDISP_Refresh>
		
		if(UART_DataAvailable())
 14a:	f0 d0       	rcall	.+480    	; 0x32c <UART_DataAvailable>
 14c:	88 23       	and	r24, r24
		{
			unsigned char data = UART_Read();
 14e:	a1 f3       	breq	.-24     	; 0x138 <main+0xc>
 150:	f0 d0       	rcall	.+480    	; 0x332 <UART_Read>
		
			if(COMM_IsHeader(data))
 152:	c8 2f       	mov	r28, r24
 154:	b9 df       	rcall	.-142    	; 0xc8 <COMM_IsHeader>
 156:	88 23       	and	r24, r24
			{
				if(COMM_IsWrite(data))
 158:	79 f0       	breq	.+30     	; 0x178 <main+0x4c>
 15a:	8c 2f       	mov	r24, r28
 15c:	b7 df       	rcall	.-146    	; 0xcc <COMM_IsWrite>
 15e:	88 23       	and	r24, r24
				{
					currentField = COMM_GetField(data);
 160:	59 f3       	breq	.-42     	; 0x138 <main+0xc>
 162:	8c 2f       	mov	r24, r28
 164:	b5 df       	rcall	.-150    	; 0xd0 <COMM_GetField>
 166:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <currentField>
					currentPayload = COMM_GetPayloadHigh(data);
 16a:	8c 2f       	mov	r24, r28
 16c:	b6 df       	rcall	.-148    	; 0xda <COMM_GetPayloadHigh>
 16e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 172:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 176:	e0 cf       	rjmp	.-64     	; 0x138 <main+0xc>
					// Node 2 doesn't have any sensors, so we ignore reads
				}
			}
			else
			{
				currentPayload = currentPayload | COMM_GetPayloadLow(data);
 178:	8c 2f       	mov	r24, r28
 17a:	b5 df       	rcall	.-150    	; 0xe6 <COMM_GetPayloadLow>
 17c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 180:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 184:	82 2b       	or	r24, r18
 186:	93 2b       	or	r25, r19
 188:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 18c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
				ProcessWriteRequest();
 190:	c3 df       	rcall	.-122    	; 0x118 <ProcessWriteRequest>
 192:	d2 cf       	rjmp	.-92     	; 0x138 <main+0xc>

00000194 <SEGDISP_Clear>:
 194:	ef e0       	ldi	r30, 0x0F	; 15
		displayBuffer[NUM_SEGMENTS - digit - 1] = SEGMENTS_MINUS;
}

void SEGDISP_SetInteger(int value) {
	
	SEGDISP_SetNumber(value, 0);
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	27 e1       	ldi	r18, 0x17	; 23
 19a:	31 e0       	ldi	r19, 0x01	; 1
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	81 93       	st	Z+, r24
 1a0:	e2 17       	cp	r30, r18
 1a2:	f3 07       	cpc	r31, r19
 1a4:	e1 f7       	brne	.-8      	; 0x19e <SEGDISP_Clear+0xa>
 1a6:	08 95       	ret

000001a8 <SEGDISP_Init>:
 1a8:	87 b3       	in	r24, 0x17	; 23
 1aa:	87 60       	ori	r24, 0x07	; 7
 1ac:	87 bb       	out	0x17, r24	; 23
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	81 bb       	out	0x11, r24	; 17
 1b2:	18 ba       	out	0x18, r1	; 24
 1b4:	82 bb       	out	0x12, r24	; 18
 1b6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <currentDigit>
 1ba:	ec cf       	rjmp	.-40     	; 0x194 <SEGDISP_Clear>
 1bc:	08 95       	ret

000001be <SEGDISP_SetNumber>:
 1be:	4f 92       	push	r4
 1c0:	5f 92       	push	r5
 1c2:	6f 92       	push	r6
 1c4:	7f 92       	push	r7
 1c6:	8f 92       	push	r8
 1c8:	9f 92       	push	r9
 1ca:	af 92       	push	r10
 1cc:	bf 92       	push	r11
 1ce:	cf 92       	push	r12
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	2b 01       	movw	r4, r22
 1de:	3c 01       	movw	r6, r24
 1e0:	4a 01       	movw	r8, r20
 1e2:	d8 df       	rcall	.-80     	; 0x194 <SEGDISP_Clear>
 1e4:	b3 01       	movw	r22, r6
 1e6:	a2 01       	movw	r20, r4
 1e8:	77 20       	and	r7, r7
 1ea:	3c f4       	brge	.+14     	; 0x1fa <SEGDISP_SetNumber+0x3c>
 1ec:	44 27       	eor	r20, r20
 1ee:	55 27       	eor	r21, r21
 1f0:	ba 01       	movw	r22, r20
 1f2:	44 19       	sub	r20, r4
 1f4:	55 09       	sbc	r21, r5
 1f6:	66 09       	sbc	r22, r6
 1f8:	77 09       	sbc	r23, r7
 1fa:	cb 01       	movw	r24, r22
 1fc:	ba 01       	movw	r22, r20
 1fe:	28 e0       	ldi	r18, 0x08	; 8
 200:	82 16       	cp	r8, r18
 202:	91 04       	cpc	r9, r1
 204:	14 f0       	brlt	.+4      	; 0x20a <SEGDISP_SetNumber+0x4c>
 206:	81 2c       	mov	r8, r1
 208:	91 2c       	mov	r9, r1
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	0f 2e       	mov	r0, r31
 20e:	f7 e0       	ldi	r31, 0x07	; 7
 210:	af 2e       	mov	r10, r31
 212:	b1 2c       	mov	r11, r1
 214:	f0 2d       	mov	r31, r0
 216:	0f 2e       	mov	r0, r31
 218:	fa e0       	ldi	r31, 0x0A	; 10
 21a:	cf 2e       	mov	r12, r31
 21c:	d1 2c       	mov	r13, r1
 21e:	e1 2c       	mov	r14, r1
 220:	f1 2c       	mov	r15, r1
 222:	f0 2d       	mov	r31, r0
 224:	1a c0       	rjmp	.+52     	; 0x25a <SEGDISP_SetNumber+0x9c>
 226:	85 01       	movw	r16, r10
 228:	0c 1b       	sub	r16, r28
 22a:	11 09       	sbc	r17, r1
 22c:	01 5f       	subi	r16, 0xF1	; 241
 22e:	1e 4f       	sbci	r17, 0xFE	; 254
 230:	a7 01       	movw	r20, r14
 232:	96 01       	movw	r18, r12
 234:	07 d2       	rcall	.+1038   	; 0x644 <__divmodsi4>
 236:	fb 01       	movw	r30, r22
 238:	e0 50       	subi	r30, 0x00	; 0
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	80 81       	ld	r24, Z
 23e:	f8 01       	movw	r30, r16
 240:	80 83       	st	Z, r24
 242:	62 2f       	mov	r22, r18
 244:	73 2f       	mov	r23, r19
 246:	84 2f       	mov	r24, r20
 248:	95 2f       	mov	r25, r21
 24a:	cf 5f       	subi	r28, 0xFF	; 255
 24c:	2c 2f       	mov	r18, r28
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	21 50       	subi	r18, 0x01	; 1
 252:	31 09       	sbc	r19, r1
 254:	28 30       	cpi	r18, 0x08	; 8
 256:	31 05       	cpc	r19, r1
 258:	54 f4       	brge	.+20     	; 0x26e <SEGDISP_SetNumber+0xb0>
 25a:	16 16       	cp	r1, r22
 25c:	17 06       	cpc	r1, r23
 25e:	18 06       	cpc	r1, r24
 260:	19 06       	cpc	r1, r25
 262:	0c f3       	brlt	.-62     	; 0x226 <SEGDISP_SetNumber+0x68>
 264:	2c 2f       	mov	r18, r28
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	82 16       	cp	r8, r18
 26a:	93 06       	cpc	r9, r19
 26c:	e4 f6       	brge	.-72     	; 0x226 <SEGDISP_SetNumber+0x68>
 26e:	81 14       	cp	r8, r1
 270:	91 04       	cpc	r9, r1
 272:	39 f0       	breq	.+14     	; 0x282 <SEGDISP_SetNumber+0xc4>
 274:	e6 e1       	ldi	r30, 0x16	; 22
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	e8 19       	sub	r30, r8
 27a:	f9 09       	sbc	r31, r9
 27c:	80 81       	ld	r24, Z
 27e:	8f 77       	andi	r24, 0x7F	; 127
 280:	80 83       	st	Z, r24
 282:	77 20       	and	r7, r7
 284:	54 f4       	brge	.+20     	; 0x29a <SEGDISP_SetNumber+0xdc>
 286:	c8 30       	cpi	r28, 0x08	; 8
 288:	40 f4       	brcc	.+16     	; 0x29a <SEGDISP_SetNumber+0xdc>
 28a:	e7 e0       	ldi	r30, 0x07	; 7
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ec 1b       	sub	r30, r28
 290:	f1 09       	sbc	r31, r1
 292:	e1 5f       	subi	r30, 0xF1	; 241
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	8f eb       	ldi	r24, 0xBF	; 191
 298:	80 83       	st	Z, r24
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	bf 90       	pop	r11
 2aa:	af 90       	pop	r10
 2ac:	9f 90       	pop	r9
 2ae:	8f 90       	pop	r8
 2b0:	7f 90       	pop	r7
 2b2:	6f 90       	pop	r6
 2b4:	5f 90       	pop	r5
 2b6:	4f 90       	pop	r4
 2b8:	08 95       	ret

000002ba <SEGDISP_SetFloat>:
}

void SEGDISP_SetFloat(float number, unsigned char decimals) {
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	d4 2f       	mov	r29, r20
		
	unsigned char shifts = 0;
	for(shifts=0; shifts<decimals; shifts++)
 2c0:	44 23       	and	r20, r20
 2c2:	49 f0       	breq	.+18     	; 0x2d6 <SEGDISP_SetFloat+0x1c>
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
		number *= 10;
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	40 e2       	ldi	r20, 0x20	; 32
 2cc:	51 e4       	ldi	r21, 0x41	; 65
 2ce:	57 d1       	rcall	.+686    	; 0x57e <__mulsf3>
}

void SEGDISP_SetFloat(float number, unsigned char decimals) {
		
	unsigned char shifts = 0;
	for(shifts=0; shifts<decimals; shifts++)
 2d0:	cf 5f       	subi	r28, 0xFF	; 255
 2d2:	dc 13       	cpse	r29, r28
 2d4:	f8 cf       	rjmp	.-16     	; 0x2c6 <SEGDISP_SetFloat+0xc>
		number *= 10;
		
	SEGDISP_SetNumber((long int)number, decimals);
 2d6:	cd 2f       	mov	r28, r29
 2d8:	d0 e0       	ldi	r29, 0x00	; 0
 2da:	92 d0       	rcall	.+292    	; 0x400 <__fixsfsi>
 2dc:	ae 01       	movw	r20, r28
 2de:	6f df       	rcall	.-290    	; 0x1be <SEGDISP_SetNumber>
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <SEGDISP_Refresh>:

void SEGDISP_Refresh() {
	
	// Turn off temporarily
	PORTD = SEGMENTS_OFF;
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	82 bb       	out	0x12, r24	; 18
	
	// Switch to current digit
	PORTB = currentDigit;
 2ea:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <currentDigit>
 2ee:	88 bb       	out	0x18, r24	; 24

	// Digits in displayBuffer must be already encoded
	PORTD = displayBuffer[currentDigit];
 2f0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <currentDigit>
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	e1 5f       	subi	r30, 0xF1	; 241
 2f8:	fe 4f       	sbci	r31, 0xFE	; 254
 2fa:	80 81       	ld	r24, Z
 2fc:	82 bb       	out	0x12, r24	; 18
	
	// Switch to next digit
	if(++currentDigit == NUM_SEGMENTS)
 2fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <currentDigit>
 302:	8f 5f       	subi	r24, 0xFF	; 255
 304:	88 30       	cpi	r24, 0x08	; 8
 306:	19 f0       	breq	.+6      	; 0x30e <SEGDISP_Refresh+0x28>
 308:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <currentDigit>
 30c:	08 95       	ret
		currentDigit = 0;
 30e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <currentDigit>
 312:	08 95       	ret

00000314 <UART_Init>:
#include "UART.h"
#include <avr/io.h>

void UART_Init(unsigned int baudrate) {
	
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0) | (1<<TXCIE0);
 314:	2a b1       	in	r18, 0x0a	; 10
 316:	28 6d       	ori	r18, 0xD8	; 216
 318:	2a b9       	out	0x0a, r18	; 10
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 31a:	e5 e9       	ldi	r30, 0x95	; 149
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	20 81       	ld	r18, Z
 320:	26 60       	ori	r18, 0x06	; 6
 322:	20 83       	st	Z, r18
	UBRR0H = baudrate >> 8;
 324:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = baudrate & 0xff;
 328:	89 b9       	out	0x09, r24	; 9
 32a:	08 95       	ret

0000032c <UART_DataAvailable>:
}

unsigned char UART_DataAvailable() {
	
	return UCSR0A & (1<<RXC0);
 32c:	8b b1       	in	r24, 0x0b	; 11
}
 32e:	80 78       	andi	r24, 0x80	; 128
 330:	08 95       	ret

00000332 <UART_Read>:

unsigned char UART_Read() {
	
	return UDR0;
 332:	8c b1       	in	r24, 0x0c	; 12
}
 334:	08 95       	ret

00000336 <__subsf3>:
 336:	50 58       	subi	r21, 0x80	; 128

00000338 <__addsf3>:
 338:	bb 27       	eor	r27, r27
 33a:	aa 27       	eor	r26, r26
 33c:	0e d0       	rcall	.+28     	; 0x35a <__addsf3x>
 33e:	e5 c0       	rjmp	.+458    	; 0x50a <__fp_round>
 340:	d6 d0       	rcall	.+428    	; 0x4ee <__fp_pscA>
 342:	30 f0       	brcs	.+12     	; 0x350 <__addsf3+0x18>
 344:	db d0       	rcall	.+438    	; 0x4fc <__fp_pscB>
 346:	20 f0       	brcs	.+8      	; 0x350 <__addsf3+0x18>
 348:	31 f4       	brne	.+12     	; 0x356 <__addsf3+0x1e>
 34a:	9f 3f       	cpi	r25, 0xFF	; 255
 34c:	11 f4       	brne	.+4      	; 0x352 <__addsf3+0x1a>
 34e:	1e f4       	brtc	.+6      	; 0x356 <__addsf3+0x1e>
 350:	cb c0       	rjmp	.+406    	; 0x4e8 <__fp_nan>
 352:	0e f4       	brtc	.+2      	; 0x356 <__addsf3+0x1e>
 354:	e0 95       	com	r30
 356:	e7 fb       	bst	r30, 7
 358:	c1 c0       	rjmp	.+386    	; 0x4dc <__fp_inf>

0000035a <__addsf3x>:
 35a:	e9 2f       	mov	r30, r25
 35c:	e7 d0       	rcall	.+462    	; 0x52c <__fp_split3>
 35e:	80 f3       	brcs	.-32     	; 0x340 <__addsf3+0x8>
 360:	ba 17       	cp	r27, r26
 362:	62 07       	cpc	r22, r18
 364:	73 07       	cpc	r23, r19
 366:	84 07       	cpc	r24, r20
 368:	95 07       	cpc	r25, r21
 36a:	18 f0       	brcs	.+6      	; 0x372 <__addsf3x+0x18>
 36c:	71 f4       	brne	.+28     	; 0x38a <__addsf3x+0x30>
 36e:	9e f5       	brtc	.+102    	; 0x3d6 <__addsf3x+0x7c>
 370:	ff c0       	rjmp	.+510    	; 0x570 <__fp_zero>
 372:	0e f4       	brtc	.+2      	; 0x376 <__addsf3x+0x1c>
 374:	e0 95       	com	r30
 376:	0b 2e       	mov	r0, r27
 378:	ba 2f       	mov	r27, r26
 37a:	a0 2d       	mov	r26, r0
 37c:	0b 01       	movw	r0, r22
 37e:	b9 01       	movw	r22, r18
 380:	90 01       	movw	r18, r0
 382:	0c 01       	movw	r0, r24
 384:	ca 01       	movw	r24, r20
 386:	a0 01       	movw	r20, r0
 388:	11 24       	eor	r1, r1
 38a:	ff 27       	eor	r31, r31
 38c:	59 1b       	sub	r21, r25
 38e:	99 f0       	breq	.+38     	; 0x3b6 <__addsf3x+0x5c>
 390:	59 3f       	cpi	r21, 0xF9	; 249
 392:	50 f4       	brcc	.+20     	; 0x3a8 <__addsf3x+0x4e>
 394:	50 3e       	cpi	r21, 0xE0	; 224
 396:	68 f1       	brcs	.+90     	; 0x3f2 <__addsf3x+0x98>
 398:	1a 16       	cp	r1, r26
 39a:	f0 40       	sbci	r31, 0x00	; 0
 39c:	a2 2f       	mov	r26, r18
 39e:	23 2f       	mov	r18, r19
 3a0:	34 2f       	mov	r19, r20
 3a2:	44 27       	eor	r20, r20
 3a4:	58 5f       	subi	r21, 0xF8	; 248
 3a6:	f3 cf       	rjmp	.-26     	; 0x38e <__addsf3x+0x34>
 3a8:	46 95       	lsr	r20
 3aa:	37 95       	ror	r19
 3ac:	27 95       	ror	r18
 3ae:	a7 95       	ror	r26
 3b0:	f0 40       	sbci	r31, 0x00	; 0
 3b2:	53 95       	inc	r21
 3b4:	c9 f7       	brne	.-14     	; 0x3a8 <__addsf3x+0x4e>
 3b6:	7e f4       	brtc	.+30     	; 0x3d6 <__addsf3x+0x7c>
 3b8:	1f 16       	cp	r1, r31
 3ba:	ba 0b       	sbc	r27, r26
 3bc:	62 0b       	sbc	r22, r18
 3be:	73 0b       	sbc	r23, r19
 3c0:	84 0b       	sbc	r24, r20
 3c2:	ba f0       	brmi	.+46     	; 0x3f2 <__addsf3x+0x98>
 3c4:	91 50       	subi	r25, 0x01	; 1
 3c6:	a1 f0       	breq	.+40     	; 0x3f0 <__addsf3x+0x96>
 3c8:	ff 0f       	add	r31, r31
 3ca:	bb 1f       	adc	r27, r27
 3cc:	66 1f       	adc	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	88 1f       	adc	r24, r24
 3d2:	c2 f7       	brpl	.-16     	; 0x3c4 <__addsf3x+0x6a>
 3d4:	0e c0       	rjmp	.+28     	; 0x3f2 <__addsf3x+0x98>
 3d6:	ba 0f       	add	r27, r26
 3d8:	62 1f       	adc	r22, r18
 3da:	73 1f       	adc	r23, r19
 3dc:	84 1f       	adc	r24, r20
 3de:	48 f4       	brcc	.+18     	; 0x3f2 <__addsf3x+0x98>
 3e0:	87 95       	ror	r24
 3e2:	77 95       	ror	r23
 3e4:	67 95       	ror	r22
 3e6:	b7 95       	ror	r27
 3e8:	f7 95       	ror	r31
 3ea:	9e 3f       	cpi	r25, 0xFE	; 254
 3ec:	08 f0       	brcs	.+2      	; 0x3f0 <__addsf3x+0x96>
 3ee:	b3 cf       	rjmp	.-154    	; 0x356 <__addsf3+0x1e>
 3f0:	93 95       	inc	r25
 3f2:	88 0f       	add	r24, r24
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <__addsf3x+0x9e>
 3f6:	99 27       	eor	r25, r25
 3f8:	ee 0f       	add	r30, r30
 3fa:	97 95       	ror	r25
 3fc:	87 95       	ror	r24
 3fe:	08 95       	ret

00000400 <__fixsfsi>:
 400:	04 d0       	rcall	.+8      	; 0x40a <__fixunssfsi>
 402:	68 94       	set
 404:	b1 11       	cpse	r27, r1
 406:	b5 c0       	rjmp	.+362    	; 0x572 <__fp_szero>
 408:	08 95       	ret

0000040a <__fixunssfsi>:
 40a:	98 d0       	rcall	.+304    	; 0x53c <__fp_splitA>
 40c:	88 f0       	brcs	.+34     	; 0x430 <__fixunssfsi+0x26>
 40e:	9f 57       	subi	r25, 0x7F	; 127
 410:	90 f0       	brcs	.+36     	; 0x436 <__fixunssfsi+0x2c>
 412:	b9 2f       	mov	r27, r25
 414:	99 27       	eor	r25, r25
 416:	b7 51       	subi	r27, 0x17	; 23
 418:	a0 f0       	brcs	.+40     	; 0x442 <__fixunssfsi+0x38>
 41a:	d1 f0       	breq	.+52     	; 0x450 <__fixunssfsi+0x46>
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	1a f0       	brmi	.+6      	; 0x42c <__fixunssfsi+0x22>
 426:	ba 95       	dec	r27
 428:	c9 f7       	brne	.-14     	; 0x41c <__fixunssfsi+0x12>
 42a:	12 c0       	rjmp	.+36     	; 0x450 <__fixunssfsi+0x46>
 42c:	b1 30       	cpi	r27, 0x01	; 1
 42e:	81 f0       	breq	.+32     	; 0x450 <__fixunssfsi+0x46>
 430:	9f d0       	rcall	.+318    	; 0x570 <__fp_zero>
 432:	b1 e0       	ldi	r27, 0x01	; 1
 434:	08 95       	ret
 436:	9c c0       	rjmp	.+312    	; 0x570 <__fp_zero>
 438:	67 2f       	mov	r22, r23
 43a:	78 2f       	mov	r23, r24
 43c:	88 27       	eor	r24, r24
 43e:	b8 5f       	subi	r27, 0xF8	; 248
 440:	39 f0       	breq	.+14     	; 0x450 <__fixunssfsi+0x46>
 442:	b9 3f       	cpi	r27, 0xF9	; 249
 444:	cc f3       	brlt	.-14     	; 0x438 <__fixunssfsi+0x2e>
 446:	86 95       	lsr	r24
 448:	77 95       	ror	r23
 44a:	67 95       	ror	r22
 44c:	b3 95       	inc	r27
 44e:	d9 f7       	brne	.-10     	; 0x446 <__fixunssfsi+0x3c>
 450:	3e f4       	brtc	.+14     	; 0x460 <__fixunssfsi+0x56>
 452:	90 95       	com	r25
 454:	80 95       	com	r24
 456:	70 95       	com	r23
 458:	61 95       	neg	r22
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	08 95       	ret

00000462 <__floatunsisf>:
 462:	e8 94       	clt
 464:	09 c0       	rjmp	.+18     	; 0x478 <__floatsisf+0x12>

00000466 <__floatsisf>:
 466:	97 fb       	bst	r25, 7
 468:	3e f4       	brtc	.+14     	; 0x478 <__floatsisf+0x12>
 46a:	90 95       	com	r25
 46c:	80 95       	com	r24
 46e:	70 95       	com	r23
 470:	61 95       	neg	r22
 472:	7f 4f       	sbci	r23, 0xFF	; 255
 474:	8f 4f       	sbci	r24, 0xFF	; 255
 476:	9f 4f       	sbci	r25, 0xFF	; 255
 478:	99 23       	and	r25, r25
 47a:	a9 f0       	breq	.+42     	; 0x4a6 <__floatsisf+0x40>
 47c:	f9 2f       	mov	r31, r25
 47e:	96 e9       	ldi	r25, 0x96	; 150
 480:	bb 27       	eor	r27, r27
 482:	93 95       	inc	r25
 484:	f6 95       	lsr	r31
 486:	87 95       	ror	r24
 488:	77 95       	ror	r23
 48a:	67 95       	ror	r22
 48c:	b7 95       	ror	r27
 48e:	f1 11       	cpse	r31, r1
 490:	f8 cf       	rjmp	.-16     	; 0x482 <__floatsisf+0x1c>
 492:	fa f4       	brpl	.+62     	; 0x4d2 <__floatsisf+0x6c>
 494:	bb 0f       	add	r27, r27
 496:	11 f4       	brne	.+4      	; 0x49c <__floatsisf+0x36>
 498:	60 ff       	sbrs	r22, 0
 49a:	1b c0       	rjmp	.+54     	; 0x4d2 <__floatsisf+0x6c>
 49c:	6f 5f       	subi	r22, 0xFF	; 255
 49e:	7f 4f       	sbci	r23, 0xFF	; 255
 4a0:	8f 4f       	sbci	r24, 0xFF	; 255
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <__floatsisf+0x6c>
 4a6:	88 23       	and	r24, r24
 4a8:	11 f0       	breq	.+4      	; 0x4ae <__floatsisf+0x48>
 4aa:	96 e9       	ldi	r25, 0x96	; 150
 4ac:	11 c0       	rjmp	.+34     	; 0x4d0 <__floatsisf+0x6a>
 4ae:	77 23       	and	r23, r23
 4b0:	21 f0       	breq	.+8      	; 0x4ba <__floatsisf+0x54>
 4b2:	9e e8       	ldi	r25, 0x8E	; 142
 4b4:	87 2f       	mov	r24, r23
 4b6:	76 2f       	mov	r23, r22
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__floatsisf+0x5e>
 4ba:	66 23       	and	r22, r22
 4bc:	71 f0       	breq	.+28     	; 0x4da <__floatsisf+0x74>
 4be:	96 e8       	ldi	r25, 0x86	; 134
 4c0:	86 2f       	mov	r24, r22
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	60 e0       	ldi	r22, 0x00	; 0
 4c6:	2a f0       	brmi	.+10     	; 0x4d2 <__floatsisf+0x6c>
 4c8:	9a 95       	dec	r25
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	88 1f       	adc	r24, r24
 4d0:	da f7       	brpl	.-10     	; 0x4c8 <__floatsisf+0x62>
 4d2:	88 0f       	add	r24, r24
 4d4:	96 95       	lsr	r25
 4d6:	87 95       	ror	r24
 4d8:	97 f9       	bld	r25, 7
 4da:	08 95       	ret

000004dc <__fp_inf>:
 4dc:	97 f9       	bld	r25, 7
 4de:	9f 67       	ori	r25, 0x7F	; 127
 4e0:	80 e8       	ldi	r24, 0x80	; 128
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	08 95       	ret

000004e8 <__fp_nan>:
 4e8:	9f ef       	ldi	r25, 0xFF	; 255
 4ea:	80 ec       	ldi	r24, 0xC0	; 192
 4ec:	08 95       	ret

000004ee <__fp_pscA>:
 4ee:	00 24       	eor	r0, r0
 4f0:	0a 94       	dec	r0
 4f2:	16 16       	cp	r1, r22
 4f4:	17 06       	cpc	r1, r23
 4f6:	18 06       	cpc	r1, r24
 4f8:	09 06       	cpc	r0, r25
 4fa:	08 95       	ret

000004fc <__fp_pscB>:
 4fc:	00 24       	eor	r0, r0
 4fe:	0a 94       	dec	r0
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	14 06       	cpc	r1, r20
 506:	05 06       	cpc	r0, r21
 508:	08 95       	ret

0000050a <__fp_round>:
 50a:	09 2e       	mov	r0, r25
 50c:	03 94       	inc	r0
 50e:	00 0c       	add	r0, r0
 510:	11 f4       	brne	.+4      	; 0x516 <__fp_round+0xc>
 512:	88 23       	and	r24, r24
 514:	52 f0       	brmi	.+20     	; 0x52a <__fp_round+0x20>
 516:	bb 0f       	add	r27, r27
 518:	40 f4       	brcc	.+16     	; 0x52a <__fp_round+0x20>
 51a:	bf 2b       	or	r27, r31
 51c:	11 f4       	brne	.+4      	; 0x522 <__fp_round+0x18>
 51e:	60 ff       	sbrs	r22, 0
 520:	04 c0       	rjmp	.+8      	; 0x52a <__fp_round+0x20>
 522:	6f 5f       	subi	r22, 0xFF	; 255
 524:	7f 4f       	sbci	r23, 0xFF	; 255
 526:	8f 4f       	sbci	r24, 0xFF	; 255
 528:	9f 4f       	sbci	r25, 0xFF	; 255
 52a:	08 95       	ret

0000052c <__fp_split3>:
 52c:	57 fd       	sbrc	r21, 7
 52e:	90 58       	subi	r25, 0x80	; 128
 530:	44 0f       	add	r20, r20
 532:	55 1f       	adc	r21, r21
 534:	59 f0       	breq	.+22     	; 0x54c <__fp_splitA+0x10>
 536:	5f 3f       	cpi	r21, 0xFF	; 255
 538:	71 f0       	breq	.+28     	; 0x556 <__fp_splitA+0x1a>
 53a:	47 95       	ror	r20

0000053c <__fp_splitA>:
 53c:	88 0f       	add	r24, r24
 53e:	97 fb       	bst	r25, 7
 540:	99 1f       	adc	r25, r25
 542:	61 f0       	breq	.+24     	; 0x55c <__fp_splitA+0x20>
 544:	9f 3f       	cpi	r25, 0xFF	; 255
 546:	79 f0       	breq	.+30     	; 0x566 <__fp_splitA+0x2a>
 548:	87 95       	ror	r24
 54a:	08 95       	ret
 54c:	12 16       	cp	r1, r18
 54e:	13 06       	cpc	r1, r19
 550:	14 06       	cpc	r1, r20
 552:	55 1f       	adc	r21, r21
 554:	f2 cf       	rjmp	.-28     	; 0x53a <__fp_split3+0xe>
 556:	46 95       	lsr	r20
 558:	f1 df       	rcall	.-30     	; 0x53c <__fp_splitA>
 55a:	08 c0       	rjmp	.+16     	; 0x56c <__fp_splitA+0x30>
 55c:	16 16       	cp	r1, r22
 55e:	17 06       	cpc	r1, r23
 560:	18 06       	cpc	r1, r24
 562:	99 1f       	adc	r25, r25
 564:	f1 cf       	rjmp	.-30     	; 0x548 <__fp_splitA+0xc>
 566:	86 95       	lsr	r24
 568:	71 05       	cpc	r23, r1
 56a:	61 05       	cpc	r22, r1
 56c:	08 94       	sec
 56e:	08 95       	ret

00000570 <__fp_zero>:
 570:	e8 94       	clt

00000572 <__fp_szero>:
 572:	bb 27       	eor	r27, r27
 574:	66 27       	eor	r22, r22
 576:	77 27       	eor	r23, r23
 578:	cb 01       	movw	r24, r22
 57a:	97 f9       	bld	r25, 7
 57c:	08 95       	ret

0000057e <__mulsf3>:
 57e:	0b d0       	rcall	.+22     	; 0x596 <__mulsf3x>
 580:	c4 cf       	rjmp	.-120    	; 0x50a <__fp_round>
 582:	b5 df       	rcall	.-150    	; 0x4ee <__fp_pscA>
 584:	28 f0       	brcs	.+10     	; 0x590 <__mulsf3+0x12>
 586:	ba df       	rcall	.-140    	; 0x4fc <__fp_pscB>
 588:	18 f0       	brcs	.+6      	; 0x590 <__mulsf3+0x12>
 58a:	95 23       	and	r25, r21
 58c:	09 f0       	breq	.+2      	; 0x590 <__mulsf3+0x12>
 58e:	a6 cf       	rjmp	.-180    	; 0x4dc <__fp_inf>
 590:	ab cf       	rjmp	.-170    	; 0x4e8 <__fp_nan>
 592:	11 24       	eor	r1, r1
 594:	ee cf       	rjmp	.-36     	; 0x572 <__fp_szero>

00000596 <__mulsf3x>:
 596:	ca df       	rcall	.-108    	; 0x52c <__fp_split3>
 598:	a0 f3       	brcs	.-24     	; 0x582 <__mulsf3+0x4>

0000059a <__mulsf3_pse>:
 59a:	95 9f       	mul	r25, r21
 59c:	d1 f3       	breq	.-12     	; 0x592 <__mulsf3+0x14>
 59e:	95 0f       	add	r25, r21
 5a0:	50 e0       	ldi	r21, 0x00	; 0
 5a2:	55 1f       	adc	r21, r21
 5a4:	62 9f       	mul	r22, r18
 5a6:	f0 01       	movw	r30, r0
 5a8:	72 9f       	mul	r23, r18
 5aa:	bb 27       	eor	r27, r27
 5ac:	f0 0d       	add	r31, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	63 9f       	mul	r22, r19
 5b2:	aa 27       	eor	r26, r26
 5b4:	f0 0d       	add	r31, r0
 5b6:	b1 1d       	adc	r27, r1
 5b8:	aa 1f       	adc	r26, r26
 5ba:	64 9f       	mul	r22, r20
 5bc:	66 27       	eor	r22, r22
 5be:	b0 0d       	add	r27, r0
 5c0:	a1 1d       	adc	r26, r1
 5c2:	66 1f       	adc	r22, r22
 5c4:	82 9f       	mul	r24, r18
 5c6:	22 27       	eor	r18, r18
 5c8:	b0 0d       	add	r27, r0
 5ca:	a1 1d       	adc	r26, r1
 5cc:	62 1f       	adc	r22, r18
 5ce:	73 9f       	mul	r23, r19
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	62 1f       	adc	r22, r18
 5d6:	83 9f       	mul	r24, r19
 5d8:	a0 0d       	add	r26, r0
 5da:	61 1d       	adc	r22, r1
 5dc:	22 1f       	adc	r18, r18
 5de:	74 9f       	mul	r23, r20
 5e0:	33 27       	eor	r19, r19
 5e2:	a0 0d       	add	r26, r0
 5e4:	61 1d       	adc	r22, r1
 5e6:	23 1f       	adc	r18, r19
 5e8:	84 9f       	mul	r24, r20
 5ea:	60 0d       	add	r22, r0
 5ec:	21 1d       	adc	r18, r1
 5ee:	82 2f       	mov	r24, r18
 5f0:	76 2f       	mov	r23, r22
 5f2:	6a 2f       	mov	r22, r26
 5f4:	11 24       	eor	r1, r1
 5f6:	9f 57       	subi	r25, 0x7F	; 127
 5f8:	50 40       	sbci	r21, 0x00	; 0
 5fa:	8a f0       	brmi	.+34     	; 0x61e <__mulsf3_pse+0x84>
 5fc:	e1 f0       	breq	.+56     	; 0x636 <__mulsf3_pse+0x9c>
 5fe:	88 23       	and	r24, r24
 600:	4a f0       	brmi	.+18     	; 0x614 <__mulsf3_pse+0x7a>
 602:	ee 0f       	add	r30, r30
 604:	ff 1f       	adc	r31, r31
 606:	bb 1f       	adc	r27, r27
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	91 50       	subi	r25, 0x01	; 1
 610:	50 40       	sbci	r21, 0x00	; 0
 612:	a9 f7       	brne	.-22     	; 0x5fe <__mulsf3_pse+0x64>
 614:	9e 3f       	cpi	r25, 0xFE	; 254
 616:	51 05       	cpc	r21, r1
 618:	70 f0       	brcs	.+28     	; 0x636 <__mulsf3_pse+0x9c>
 61a:	60 cf       	rjmp	.-320    	; 0x4dc <__fp_inf>
 61c:	aa cf       	rjmp	.-172    	; 0x572 <__fp_szero>
 61e:	5f 3f       	cpi	r21, 0xFF	; 255
 620:	ec f3       	brlt	.-6      	; 0x61c <__mulsf3_pse+0x82>
 622:	98 3e       	cpi	r25, 0xE8	; 232
 624:	dc f3       	brlt	.-10     	; 0x61c <__mulsf3_pse+0x82>
 626:	86 95       	lsr	r24
 628:	77 95       	ror	r23
 62a:	67 95       	ror	r22
 62c:	b7 95       	ror	r27
 62e:	f7 95       	ror	r31
 630:	e7 95       	ror	r30
 632:	9f 5f       	subi	r25, 0xFF	; 255
 634:	c1 f7       	brne	.-16     	; 0x626 <__mulsf3_pse+0x8c>
 636:	fe 2b       	or	r31, r30
 638:	88 0f       	add	r24, r24
 63a:	91 1d       	adc	r25, r1
 63c:	96 95       	lsr	r25
 63e:	87 95       	ror	r24
 640:	97 f9       	bld	r25, 7
 642:	08 95       	ret

00000644 <__divmodsi4>:
 644:	05 2e       	mov	r0, r21
 646:	97 fb       	bst	r25, 7
 648:	16 f4       	brtc	.+4      	; 0x64e <__divmodsi4+0xa>
 64a:	00 94       	com	r0
 64c:	0f d0       	rcall	.+30     	; 0x66c <__negsi2>
 64e:	57 fd       	sbrc	r21, 7
 650:	05 d0       	rcall	.+10     	; 0x65c <__divmodsi4_neg2>
 652:	14 d0       	rcall	.+40     	; 0x67c <__udivmodsi4>
 654:	07 fc       	sbrc	r0, 7
 656:	02 d0       	rcall	.+4      	; 0x65c <__divmodsi4_neg2>
 658:	46 f4       	brtc	.+16     	; 0x66a <__divmodsi4_exit>
 65a:	08 c0       	rjmp	.+16     	; 0x66c <__negsi2>

0000065c <__divmodsi4_neg2>:
 65c:	50 95       	com	r21
 65e:	40 95       	com	r20
 660:	30 95       	com	r19
 662:	21 95       	neg	r18
 664:	3f 4f       	sbci	r19, 0xFF	; 255
 666:	4f 4f       	sbci	r20, 0xFF	; 255
 668:	5f 4f       	sbci	r21, 0xFF	; 255

0000066a <__divmodsi4_exit>:
 66a:	08 95       	ret

0000066c <__negsi2>:
 66c:	90 95       	com	r25
 66e:	80 95       	com	r24
 670:	70 95       	com	r23
 672:	61 95       	neg	r22
 674:	7f 4f       	sbci	r23, 0xFF	; 255
 676:	8f 4f       	sbci	r24, 0xFF	; 255
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__udivmodsi4>:
 67c:	a1 e2       	ldi	r26, 0x21	; 33
 67e:	1a 2e       	mov	r1, r26
 680:	aa 1b       	sub	r26, r26
 682:	bb 1b       	sub	r27, r27
 684:	fd 01       	movw	r30, r26
 686:	0d c0       	rjmp	.+26     	; 0x6a2 <__udivmodsi4_ep>

00000688 <__udivmodsi4_loop>:
 688:	aa 1f       	adc	r26, r26
 68a:	bb 1f       	adc	r27, r27
 68c:	ee 1f       	adc	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	a2 17       	cp	r26, r18
 692:	b3 07       	cpc	r27, r19
 694:	e4 07       	cpc	r30, r20
 696:	f5 07       	cpc	r31, r21
 698:	20 f0       	brcs	.+8      	; 0x6a2 <__udivmodsi4_ep>
 69a:	a2 1b       	sub	r26, r18
 69c:	b3 0b       	sbc	r27, r19
 69e:	e4 0b       	sbc	r30, r20
 6a0:	f5 0b       	sbc	r31, r21

000006a2 <__udivmodsi4_ep>:
 6a2:	66 1f       	adc	r22, r22
 6a4:	77 1f       	adc	r23, r23
 6a6:	88 1f       	adc	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	1a 94       	dec	r1
 6ac:	69 f7       	brne	.-38     	; 0x688 <__udivmodsi4_loop>
 6ae:	60 95       	com	r22
 6b0:	70 95       	com	r23
 6b2:	80 95       	com	r24
 6b4:	90 95       	com	r25
 6b6:	9b 01       	movw	r18, r22
 6b8:	ac 01       	movw	r20, r24
 6ba:	bd 01       	movw	r22, r26
 6bc:	cf 01       	movw	r24, r30
 6be:	08 95       	ret

000006c0 <_exit>:
 6c0:	f8 94       	cli

000006c2 <__stop_program>:
 6c2:	ff cf       	rjmp	.-2      	; 0x6c2 <__stop_program>
