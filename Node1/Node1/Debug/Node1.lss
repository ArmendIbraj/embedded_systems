
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003e0  00000474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010c  0080010c  00000480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013c1  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb2  00000000  00000000  000019cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e4  00000000  00000000  0000257f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a1  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006be  00000000  00000000  0000361d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003cdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ee       	ldi	r30, 0xE0	; 224
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	23 d1       	rcall	.+582    	; 0x30a <main>
  c4:	8b c1       	rjmp	.+790    	; 0x3dc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <COMM_IsHeader>:
#include "CommProtocol.h"

unsigned char COMM_IsHeader(unsigned char value) {
	
	return value & 0x80;
}
  c8:	80 78       	andi	r24, 0x80	; 128
  ca:	08 95       	ret

000000cc <COMM_IsWrite>:

unsigned char COMM_IsWrite(unsigned char value) {
	
	return value & 0x40;
}
  cc:	80 74       	andi	r24, 0x40	; 64
  ce:	08 95       	ret

000000d0 <COMM_GetField>:

unsigned char COMM_GetField(unsigned char value) {
	
	return (value >> 3) & 0x03;
  d0:	86 95       	lsr	r24
  d2:	86 95       	lsr	r24
  d4:	86 95       	lsr	r24
}
  d6:	83 70       	andi	r24, 0x03	; 3
  d8:	08 95       	ret

000000da <COMM_GetPayloadHigh>:

unsigned int COMM_GetPayloadHigh(unsigned char value) {
	
	return (unsigned int)(value & 0x07) << 7;
  da:	87 70       	andi	r24, 0x07	; 7
}
  dc:	20 e8       	ldi	r18, 0x80	; 128
  de:	82 9f       	mul	r24, r18
  e0:	c0 01       	movw	r24, r0
  e2:	11 24       	eor	r1, r1
  e4:	08 95       	ret

000000e6 <COMM_GetPayloadLow>:

unsigned int COMM_GetPayloadLow(unsigned char value) {
	
	return value & 0x7F;
  e6:	8f 77       	andi	r24, 0x7F	; 127
}
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret

000000ec <SPI_MasterInit>:
#include "lcd.h"

void SPI_MasterInit(void)
{
	DDRB = 0xCF;
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1);
  f0:	83 e5       	ldi	r24, 0x53	; 83
  f2:	8d b9       	out	0x0d, r24	; 13

	PORTB = 0x80;
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	08 95       	ret

000000fa <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(unsigned char Data)
{
	SPDR = Data;
  fa:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
  fc:	77 9b       	sbis	0x0e, 7	; 14
  fe:	fe cf       	rjmp	.-4      	; 0xfc <SPI_MasterTransmit+0x2>
}
 100:	08 95       	ret

00000102 <LCD_InitContrastPWM>:

void LCD_InitContrastPWM()
{
	TCCR1A = (1<<COM1C1) | (1<<WGM11) | (1<<WGM10);
 102:	8b e0       	ldi	r24, 0x0B	; 11
 104:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12) | (1<<CS10);
 106:	89 e0       	ldi	r24, 0x09	; 9
 108:	8e bd       	out	0x2e, r24	; 46
	
	OCR1C = 300;
 10a:	8c e2       	ldi	r24, 0x2C	; 44
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 112:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 116:	08 95       	ret

00000118 <LCD_Write>:
}

void LCD_Write(unsigned char Value, unsigned char RS, unsigned char RW)
{
 118:	ef 92       	push	r14
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
	unsigned char ReversedValue = 0;
	unsigned char Bit = 8;
 124:	98 e0       	ldi	r25, 0x08	; 8
	OCR1C = 300;
}

void LCD_Write(unsigned char Value, unsigned char RS, unsigned char RW)
{
	unsigned char ReversedValue = 0;
 126:	c0 e0       	ldi	r28, 0x00	; 0
	//Byte has to be transmitted in a LSb first order (pretty stupid), so we reverse the byte
	while(Bit)
	{
		Bit--;

		if(Value & (1<<Bit))
 128:	a8 2f       	mov	r26, r24
 12a:	b0 e0       	ldi	r27, 0x00	; 0
		ReversedValue |= (1<<(7-Bit));
 12c:	0f 2e       	mov	r0, r31
 12e:	f7 e0       	ldi	r31, 0x07	; 7
 130:	ef 2e       	mov	r14, r31
 132:	f1 2c       	mov	r15, r1
 134:	f0 2d       	mov	r31, r0
 136:	01 e0       	ldi	r16, 0x01	; 1
 138:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char Bit = 8;

	//Byte has to be transmitted in a LSb first order (pretty stupid), so we reverse the byte
	while(Bit)
	{
		Bit--;
 13a:	91 50       	subi	r25, 0x01	; 1

		if(Value & (1<<Bit))
 13c:	e9 2f       	mov	r30, r25
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	9d 01       	movw	r18, r26
 142:	09 2e       	mov	r0, r25
 144:	02 c0       	rjmp	.+4      	; 0x14a <LCD_Write+0x32>
 146:	35 95       	asr	r19
 148:	27 95       	ror	r18
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <LCD_Write+0x2e>
 14e:	20 ff       	sbrs	r18, 0
 150:	0a c0       	rjmp	.+20     	; 0x166 <LCD_Write+0x4e>
		ReversedValue |= (1<<(7-Bit));
 152:	97 01       	movw	r18, r14
 154:	2e 1b       	sub	r18, r30
 156:	3f 0b       	sbc	r19, r31
 158:	f8 01       	movw	r30, r16
 15a:	02 c0       	rjmp	.+4      	; 0x160 <LCD_Write+0x48>
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	2a 95       	dec	r18
 162:	e2 f7       	brpl	.-8      	; 0x15c <LCD_Write+0x44>
 164:	ce 2b       	or	r28, r30
{
	unsigned char ReversedValue = 0;
	unsigned char Bit = 8;

	//Byte has to be transmitted in a LSb first order (pretty stupid), so we reverse the byte
	while(Bit)
 166:	91 11       	cpse	r25, r1
 168:	e8 cf       	rjmp	.-48     	; 0x13a <LCD_Write+0x22>
		if(Value & (1<<Bit))
		ReversedValue |= (1<<(7-Bit));
	}

	unsigned char StartByte = 0xF8;
	unsigned char FirstData = ReversedValue & 0xF0;
 16a:	1c 2f       	mov	r17, r28
 16c:	10 7f       	andi	r17, 0xF0	; 240
	unsigned char SecondData = (ReversedValue << 4) & 0xF0;
 16e:	f0 e1       	ldi	r31, 0x10	; 16
 170:	cf 9f       	mul	r28, r31
 172:	e0 01       	movw	r28, r0
 174:	11 24       	eor	r1, r1
	
	if(RS)
 176:	66 23       	and	r22, r22
 178:	11 f0       	breq	.+4      	; 0x17e <LCD_Write+0x66>
		StartByte |= 2;
 17a:	8a ef       	ldi	r24, 0xFA	; 250
 17c:	01 c0       	rjmp	.+2      	; 0x180 <LCD_Write+0x68>

		if(Value & (1<<Bit))
		ReversedValue |= (1<<(7-Bit));
	}

	unsigned char StartByte = 0xF8;
 17e:	88 ef       	ldi	r24, 0xF8	; 248
	unsigned char SecondData = (ReversedValue << 4) & 0xF0;
	
	if(RS)
		StartByte |= 2;

	if(RW)
 180:	41 11       	cpse	r20, r1
		StartByte |= 4;
 182:	84 60       	ori	r24, 0x04	; 4

	
	SPI_MasterTransmit(StartByte);
 184:	ba df       	rcall	.-140    	; 0xfa <SPI_MasterTransmit>
	
	SPI_MasterTransmit(FirstData);
 186:	81 2f       	mov	r24, r17
 188:	b8 df       	rcall	.-144    	; 0xfa <SPI_MasterTransmit>
	
	SPI_MasterTransmit(SecondData);
 18a:	8c 2f       	mov	r24, r28
 18c:	b6 df       	rcall	.-148    	; 0xfa <SPI_MasterTransmit>
 18e:	df 91       	pop	r29
}
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	ff 90       	pop	r15
 198:	ef 90       	pop	r14
 19a:	08 95       	ret

0000019c <LCD_Clear>:
 19c:	40 e0       	ldi	r20, 0x00	; 0

void LCD_Clear()
{
	LCD_Write(0x01, 0, 0);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	ba df       	rcall	.-140    	; 0x118 <LCD_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	8c ec       	ldi	r24, 0xCC	; 204
 1a6:	9c e1       	ldi	r25, 0x1C	; 28
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_Clear+0xc>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Clear+0x12>
 1ae:	00 00       	nop
 1b0:	08 95       	ret

000001b2 <LCD_SetAddress>:
	_delay_ms(2);
}

void LCD_SetAddress(unsigned char Position, unsigned char Line)
{
	if(Line == 2)
 1b2:	62 30       	cpi	r22, 0x02	; 2
 1b4:	29 f4       	brne	.+10     	; 0x1c0 <LCD_SetAddress+0xe>
		LCD_Write(0x80 | 0x20 | Position, 0, 0);
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	80 6a       	ori	r24, 0xA0	; 160
 1bc:	ad cf       	rjmp	.-166    	; 0x118 <LCD_Write>
 1be:	08 95       	ret
	else if(Line == 3)
 1c0:	63 30       	cpi	r22, 0x03	; 3
 1c2:	29 f4       	brne	.+10     	; 0x1ce <LCD_SetAddress+0x1c>
		LCD_Write(0x80 | 0x40 | Position, 0, 0);
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	80 6c       	ori	r24, 0xC0	; 192
 1ca:	a6 cf       	rjmp	.-180    	; 0x118 <LCD_Write>
 1cc:	08 95       	ret
	else if(Line == 4)
 1ce:	64 30       	cpi	r22, 0x04	; 4
 1d0:	29 f4       	brne	.+10     	; 0x1dc <LCD_SetAddress+0x2a>
		LCD_Write(0x80 | 0x60 | Position, 0, 0);
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	80 6e       	ori	r24, 0xE0	; 224
 1d8:	9f cf       	rjmp	.-194    	; 0x118 <LCD_Write>
 1da:	08 95       	ret
	else
		LCD_Write(0x80, 0, 0);
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	9a cf       	rjmp	.-204    	; 0x118 <LCD_Write>
 1e4:	08 95       	ret

000001e6 <LCD_Init>:
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	8f e7       	ldi	r24, 0x7F	; 127
 1ea:	94 e0       	ldi	r25, 0x04	; 4
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <LCD_Init+0x6>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_Init+0x10>
 1f6:	00 00       	nop

void LCD_Init()
{
	_delay_ms(100);
	
	SPI_MasterInit();
 1f8:	79 df       	rcall	.-270    	; 0xec <SPI_MasterInit>
	LCD_InitContrastPWM();
 1fa:	83 df       	rcall	.-250    	; 0x102 <LCD_InitContrastPWM>
 1fc:	2f ef       	ldi	r18, 0xFF	; 255
 1fe:	8f e1       	ldi	r24, 0x1F	; 31
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <LCD_Init+0x1c>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_Init+0x26>
 20c:	00 00       	nop
 20e:	40 e0       	ldi	r20, 0x00	; 0

	_delay_ms(25);

	LCD_Write(0x34, 0, 0);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	84 e3       	ldi	r24, 0x34	; 52
 214:	81 df       	rcall	.-254    	; 0x118 <LCD_Write>
 216:	24 ec       	ldi	r18, 0xC4	; 196
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	2a 95       	dec	r18
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_Init+0x32>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_Init+0x38>
 21e:	40 e0       	ldi	r20, 0x00	; 0
	_delay_us(40);

	LCD_Write(0x09, 0, 0);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	89 e0       	ldi	r24, 0x09	; 9
 224:	79 df       	rcall	.-270    	; 0x118 <LCD_Write>
 226:	84 ec       	ldi	r24, 0xC4	; 196
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Init+0x42>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Init+0x48>
	_delay_us(40);

	LCD_Write(0x30, 0, 0);
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	80 e3       	ldi	r24, 0x30	; 48
 234:	71 df       	rcall	.-286    	; 0x118 <LCD_Write>
 236:	94 ec       	ldi	r25, 0xC4	; 196
 238:	9a 95       	dec	r25
 23a:	f1 f7       	brne	.-4      	; 0x238 <LCD_Init+0x52>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <LCD_Init+0x58>
	_delay_us(40);

	LCD_Write(0x0C, 0, 0);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	8c e0       	ldi	r24, 0x0C	; 12
 244:	69 df       	rcall	.-302    	; 0x118 <LCD_Write>
 246:	24 ec       	ldi	r18, 0xC4	; 196
 248:	2a 95       	dec	r18
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_Init+0x62>
	_delay_us(40);

	LCD_Clear();
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_Init+0x68>
 24e:	a6 df       	rcall	.-180    	; 0x19c <LCD_Clear>

	LCD_Write(0x06, 0, 0);
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	86 e0       	ldi	r24, 0x06	; 6
 256:	60 df       	rcall	.-320    	; 0x118 <LCD_Write>
 258:	84 ec       	ldi	r24, 0xC4	; 196
 25a:	8a 95       	dec	r24
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_Init+0x74>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_Init+0x7a>
 260:	08 95       	ret

00000262 <LCD_WriteString>:
 262:	cf 93       	push	r28
	_delay_us(40);
}

void LCD_WriteString(char *Data)
{
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
	while(*Data)
 268:	88 81       	ld	r24, Y
 26a:	88 23       	and	r24, r24
 26c:	39 f0       	breq	.+14     	; 0x27c <LCD_WriteString+0x1a>
 26e:	21 96       	adiw	r28, 0x01	; 1
		LCD_Write(*Data++, 1, 0);
 270:	40 e0       	ldi	r20, 0x00	; 0
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	51 df       	rcall	.-350    	; 0x118 <LCD_Write>
	_delay_us(40);
}

void LCD_WriteString(char *Data)
{
	while(*Data)
 276:	89 91       	ld	r24, Y+
 278:	81 11       	cpse	r24, r1
 27a:	fa cf       	rjmp	.-12     	; 0x270 <LCD_WriteString+0xe>
		LCD_Write(*Data++, 1, 0);
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <SetLuminescenceValue>:
			break;
	}
}

void SetLuminescenceValue(unsigned int value) 
{
 282:	0f 93       	push	r16
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	00 d0       	rcall	.+0      	; 0x28c <SetLuminescenceValue+0xa>
 28c:	00 d0       	rcall	.+0      	; 0x28e <SetLuminescenceValue+0xc>
 28e:	00 d0       	rcall	.+0      	; 0x290 <SetLuminescenceValue+0xe>
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	8c 01       	movw	r16, r24
	LCD_Clear();
 296:	82 df       	rcall	.-252    	; 0x19c <LCD_Clear>

	LCD_SetAddress(0, 1);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	8a df       	rcall	.-236    	; 0x1b2 <LCD_SetAddress>
	LCD_WriteString("Intensity: ");
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	df df       	rcall	.-66     	; 0x262 <LCD_WriteString>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2a4:	4a e0       	ldi	r20, 0x0A	; 10
 2a6:	be 01       	movw	r22, r28
 2a8:	6f 5f       	subi	r22, 0xFF	; 255
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255
 2ac:	c8 01       	movw	r24, r16
	
	char strValue[6];
	itoa(value, strValue, 10);
	
	LCD_WriteString(strValue);
 2ae:	63 d0       	rcall	.+198    	; 0x376 <__itoa_ncheck>
 2b0:	ce 01       	movw	r24, r28
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	d6 df       	rcall	.-84     	; 0x262 <LCD_WriteString>
}
 2b6:	26 96       	adiw	r28, 0x06	; 6
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <SetLampIntensity>:

void SetLampIntensity(unsigned int value)
{
 2cc:	9c 01       	movw	r18, r24
	DDRB |= 1<<PINB5 | 1<<PINB6;
 2ce:	97 b3       	in	r25, 0x17	; 23
 2d0:	90 66       	ori	r25, 0x60	; 96
 2d2:	97 bb       	out	0x17, r25	; 23

	TCCR1A |= (1<<COM1C1) | (1<<COM1A1) | (1<<WGM11) | (1<<WGM10);
 2d4:	9f b5       	in	r25, 0x2f	; 47
 2d6:	9b 68       	ori	r25, 0x8B	; 139
 2d8:	9f bd       	out	0x2f, r25	; 47
	TCCR1B = (1<<WGM12) | (1<<CS10);
 2da:	89 e0       	ldi	r24, 0x09	; 9
 2dc:	8e bd       	out	0x2e, r24	; 46

	OCR1A = value;
 2de:	3b bd       	out	0x2b, r19	; 43
 2e0:	2a bd       	out	0x2a, r18	; 42
 2e2:	08 95       	ret

000002e4 <ProcessWriteRequest>:
    }
}

void ProcessWriteRequest() 
{
	switch (currentField)
 2e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <currentField>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <ProcessWriteRequest+0xe>
 2ec:	82 30       	cpi	r24, 0x02	; 2
 2ee:	39 f0       	breq	.+14     	; 0x2fe <ProcessWriteRequest+0x1a>
 2f0:	08 95       	ret
	{
		case FILED_LUMINESCENCE_SENSOR:
			SetLuminescenceValue(currentPayload);
 2f2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2f6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 2fa:	c3 cf       	rjmp	.-122    	; 0x282 <SetLuminescenceValue>
			break;
 2fc:	08 95       	ret
		
		case FILED_LAMP_INTENSITY:
			SetLampIntensity(currentPayload);
 2fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 302:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 306:	e2 cf       	rjmp	.-60     	; 0x2cc <SetLampIntensity>
 308:	08 95       	ret

0000030a <main>:
unsigned char currentField;
unsigned int  currentPayload;

int main(void)
{
	LCD_Init();
 30a:	6d df       	rcall	.-294    	; 0x1e6 <LCD_Init>
	UART_Init(9600);
 30c:	80 e8       	ldi	r24, 0x80	; 128
 30e:	95 e2       	ldi	r25, 0x25	; 37
	
    while (1) 
    {
		unsigned char data = UART_ReadBlocking();
 310:	22 d0       	rcall	.+68     	; 0x356 <UART_Init>
 312:	2d d0       	rcall	.+90     	; 0x36e <UART_ReadBlocking>
		
		if(COMM_IsHeader(data)) 
 314:	c8 2f       	mov	r28, r24
 316:	d8 de       	rcall	.-592    	; 0xc8 <COMM_IsHeader>
 318:	88 23       	and	r24, r24
		{
			if(COMM_IsWrite(data)) 
 31a:	79 f0       	breq	.+30     	; 0x33a <main+0x30>
 31c:	8c 2f       	mov	r24, r28
 31e:	d6 de       	rcall	.-596    	; 0xcc <COMM_IsWrite>
 320:	88 23       	and	r24, r24
			{
				currentField = COMM_GetField(data);
 322:	b9 f3       	breq	.-18     	; 0x312 <main+0x8>
 324:	8c 2f       	mov	r24, r28
 326:	d4 de       	rcall	.-600    	; 0xd0 <COMM_GetField>
 328:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <currentField>
				currentPayload = COMM_GetPayloadHigh(data);
 32c:	8c 2f       	mov	r24, r28
 32e:	d5 de       	rcall	.-598    	; 0xda <COMM_GetPayloadHigh>
 330:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 334:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
				// Node 1 doesn't have any sensors, so we ignore reads
			}
		}
		else 
		{
			currentPayload = currentPayload | COMM_GetPayloadLow(data);
 338:	ec cf       	rjmp	.-40     	; 0x312 <main+0x8>
 33a:	8c 2f       	mov	r24, r28
 33c:	d4 de       	rcall	.-600    	; 0xe6 <COMM_GetPayloadLow>
 33e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__data_end>
 342:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__data_end+0x1>
 346:	82 2b       	or	r24, r18
 348:	93 2b       	or	r25, r19
 34a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 34e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
			ProcessWriteRequest();
 352:	c8 df       	rcall	.-112    	; 0x2e4 <ProcessWriteRequest>
 354:	de cf       	rjmp	.-68     	; 0x312 <main+0x8>

00000356 <UART_Init>:
}

unsigned char UART_Read() {
	
	return UDR0;
}
 356:	2a b1       	in	r18, 0x0a	; 10
 358:	28 6d       	ori	r18, 0xD8	; 216
 35a:	2a b9       	out	0x0a, r18	; 10
 35c:	e5 e9       	ldi	r30, 0x95	; 149
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	20 81       	ld	r18, Z
 362:	26 60       	ori	r18, 0x06	; 6
 364:	20 83       	st	Z, r18
 366:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 36a:	89 b9       	out	0x09, r24	; 9
 36c:	08 95       	ret

0000036e <UART_ReadBlocking>:

unsigned char UART_ReadBlocking() {
	
	while(!(UCSR0A & (1<<RXC0)));
 36e:	5f 9b       	sbis	0x0b, 7	; 11
 370:	fe cf       	rjmp	.-4      	; 0x36e <UART_ReadBlocking>
	return UDR0;
 372:	8c b1       	in	r24, 0x0c	; 12
}
 374:	08 95       	ret

00000376 <__itoa_ncheck>:
 376:	bb 27       	eor	r27, r27
 378:	4a 30       	cpi	r20, 0x0A	; 10
 37a:	31 f4       	brne	.+12     	; 0x388 <__itoa_ncheck+0x12>
 37c:	99 23       	and	r25, r25
 37e:	22 f4       	brpl	.+8      	; 0x388 <__itoa_ncheck+0x12>
 380:	bd e2       	ldi	r27, 0x2D	; 45
 382:	90 95       	com	r25
 384:	81 95       	neg	r24
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	01 c0       	rjmp	.+2      	; 0x38c <__utoa_common>

0000038a <__utoa_ncheck>:
 38a:	bb 27       	eor	r27, r27

0000038c <__utoa_common>:
 38c:	fb 01       	movw	r30, r22
 38e:	55 27       	eor	r21, r21
 390:	aa 27       	eor	r26, r26
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	aa 1f       	adc	r26, r26
 398:	a4 17       	cp	r26, r20
 39a:	10 f0       	brcs	.+4      	; 0x3a0 <__utoa_common+0x14>
 39c:	a4 1b       	sub	r26, r20
 39e:	83 95       	inc	r24
 3a0:	50 51       	subi	r21, 0x10	; 16
 3a2:	b9 f7       	brne	.-18     	; 0x392 <__utoa_common+0x6>
 3a4:	a0 5d       	subi	r26, 0xD0	; 208
 3a6:	aa 33       	cpi	r26, 0x3A	; 58
 3a8:	08 f0       	brcs	.+2      	; 0x3ac <__utoa_common+0x20>
 3aa:	a9 5d       	subi	r26, 0xD9	; 217
 3ac:	a1 93       	st	Z+, r26
 3ae:	00 97       	sbiw	r24, 0x00	; 0
 3b0:	79 f7       	brne	.-34     	; 0x390 <__utoa_common+0x4>
 3b2:	b1 11       	cpse	r27, r1
 3b4:	b1 93       	st	Z+, r27
 3b6:	11 92       	st	Z+, r1
 3b8:	cb 01       	movw	r24, r22
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <strrev>

000003bc <strrev>:
 3bc:	dc 01       	movw	r26, r24
 3be:	fc 01       	movw	r30, r24
 3c0:	67 2f       	mov	r22, r23
 3c2:	71 91       	ld	r23, Z+
 3c4:	77 23       	and	r23, r23
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <strrev+0x4>
 3c8:	32 97       	sbiw	r30, 0x02	; 2
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <strrev+0x18>
 3cc:	7c 91       	ld	r23, X
 3ce:	6d 93       	st	X+, r22
 3d0:	70 83       	st	Z, r23
 3d2:	62 91       	ld	r22, -Z
 3d4:	ae 17       	cp	r26, r30
 3d6:	bf 07       	cpc	r27, r31
 3d8:	c8 f3       	brcs	.-14     	; 0x3cc <strrev+0x10>
 3da:	08 95       	ret

000003dc <_exit>:
 3dc:	f8 94       	cli

000003de <__stop_program>:
 3de:	ff cf       	rjmp	.-2      	; 0x3de <__stop_program>
